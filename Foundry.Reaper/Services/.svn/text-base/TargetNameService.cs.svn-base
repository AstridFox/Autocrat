using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using Foundry.Autocrat.Everquest2.Memory;
using Foundry.Autocrat.Extensions.Memory;

using Managed.X86;
using System.IO;
using Foundry.Autocrat.Geometry;

namespace Foundry.Reaper.Services {
	public class TargetNameService {
		public Process Eq2Process { get; set; }
		public Eq2PointerLibrary Eq2PointerLibrary { get; set; }

		public TargetNameService(Process eq2Process, Eq2PointerLibrary eq2PointerLibrary) {
			Eq2Process = eq2Process;
			Eq2PointerLibrary = eq2PointerLibrary;
			Initialize();
		}

		public virtual string TargetName {
			get {
				return GetTargetName();
			}
		}

		private string GetTargetName() {
			return Eq2Process.ReadString(DataCave, 255, Encoding.Unicode, true);
		}

		private IntPtr DataCave = IntPtr.Zero;
		private void Initialize() {
			// Create data cave.
			IntPtr dataCave = Eq2Process.AllocateMemory(512, ProcessMemoryExtensions.ProtectionType.ReadWrite);
			if (dataCave == IntPtr.Zero) throw new ApplicationException("Could not allocate memory inside EverQuest 2 process.");

			// Get function and injection locations
			IntPtr functionCave = Eq2PointerLibrary.AutocratTargetNameFunction;
			IntPtr pcFunction = Eq2PointerLibrary.AutocratPCTargetFunction;
			IntPtr npcFunction = Eq2PointerLibrary.AutocratNPCTargetFunction;

			// Get function and injection codes
			byte[] fnBytes = GetFunctionCode(functionCave, dataCave);
			byte[] pcBytes = GetInjectionCode(pcFunction, functionCave, 0x06);
			byte[] npcBytes = GetInjectionCode(npcFunction, functionCave, 0x09);

			// Change protection on function location to allow write and execute
			Eq2Process.ChangeProtection(functionCave, 512, ProcessMemoryExtensions.ProtectionType.ExecuteReadWrite);

			// Change protection on jump locations to allow write
			Eq2Process.ChangeProtection(pcFunction, 32, ProcessMemoryExtensions.ProtectionType.ExecuteReadWrite);
			Eq2Process.ChangeProtection(npcFunction, 32, ProcessMemoryExtensions.ProtectionType.ExecuteReadWrite);

			// Write function and injections
			Eq2Process.Write(functionCave, fnBytes);
			Eq2Process.Write(pcFunction, pcBytes);
			Eq2Process.Write(npcFunction, npcBytes);

			// Done.
			DataCave = dataCave;
		}

		private byte[] GetInjectionCode(IntPtr injectionSite, IntPtr jumpLocation, byte pushValue) {
			using (var ms = new MemoryStream()) {
				var writer = new X86Writer(ms, injectionSite);
				writer.Push32(pushValue);
				writer.Call(jumpLocation);
				return ms.ToArray();
			}
		}

		private byte[] GetFunctionCode(IntPtr codeCave, IntPtr dataCave) {
			using (var ms = new MemoryStream()) {
				var writer = new X86Writer(ms, codeCave);

				//00    53              PUSH EBX
				//01    52              PUSH EDX
				//02    57              PUSH EDI
				//03    56              PUSH ESI
				//04    8B5C24 10       MOV EBX,DWORD PTR SS:[ESP+10]
				//08    8B30            MOV ESI,DWORD PTR DS:[EAX]
				//0A    BF ********     MOV EDI,[DATA CAVE]

				//0F  > 66:8B16         MOV DX,WORD PTR DS:[ESI]
				//12  | 66:8917         MOV WORD PTR DS:[EDI],DX
				//15  | 83C6 02         ADD ESI,2
				//18  | 83C7 02         ADD EDI,2
				//1B  | 66:83FA 00      CMP DX,0
				//1F  ^ 75 EE           JNZ SHORT 0F

				//21    5E              POP ESI
				//22    5F              POP EDI
				//23    8B5C24 0C       MOV EBX,DWORD PTR SS:[ESP+C]
				//27    8B5424 08       MOV EDX,DWORD PTR SS:[ESP+8]
				//2B    8BCD            MOV ECX,EBP
				//2D    887C24 64       MOV BYTE PTR SS:[ESP+64],BH
				//31    895424 0C       MOV DWORD PTR SS:[ESP+C],EDX
				//35    5A              POP EDX
				//36    5B              POP EBX
				//37    83C4 04         ADD ESP,4
				//3A    C3              RETN

				X86Register32 eax = X86Register32.EAX;
				X86Register32 ebx = X86Register32.EBX;
				X86Register32 ecx = X86Register32.ECX;
				X86Register32 edx = X86Register32.EDX;
				X86Register32 ebp = X86Register32.EBP;
				X86Register32 esp = X86Register32.ESP;
				X86Register32 esi = X86Register32.ESI;
				X86Register32 edi = X86Register32.EDI;

				X86Register16 dx = X86Register16.DX;
				X86Register8 bh = X86Register8.BH;

				X86Label start = writer.CreateLabel();
				X86Label loopStart = writer.CreateLabel();

				start.Mark();
				writer.Push32(ebx);
				writer.Push32(edx);
				writer.Push32(edi);
				writer.Push32(esi);
				writer.Mov32(ebx, new X86Address(esp, 0x10));
				writer.Mov32(esi, new X86Address(eax, 0x00));
				writer.Mov32(edi, dataCave.ToInt32());

				loopStart.Mark();
				writer.Mov16(dx, new X86Address(esi, 0x00));
				writer.Mov16(new X86Address(edi, 0x00), dx);
				writer.Add32(esi, 0x02);
				writer.Add32(edi, 0x02);
				writer.Cmp16(dx, (short)0x00);
				writer.Jmp(X86ConditionCode.NotZero, loopStart);

				writer.Pop32(esi);
				writer.Pop32(edi);
				writer.Mov32(ebx, new X86Address(esp, 0x0c));
				writer.Mov32(edx, new X86Address(esp, 0x08));
				writer.Mov32(ecx, ebp);
				writer.Mov8(new X86Address(esp, 0x64), bh);
				writer.Mov32(new X86Address(esp, 0x0C), edx);
				writer.Pop32(edx);
				writer.Pop32(ebx);
				writer.Add32(esp, 0x04);

				writer.Retn();

				return ms.ToArray();
			}
		}

	}
}
